@model Trivesta.Model.ViewModel.RoomsVM
@using trivesta.Services;
@inject LoginValidator loginValidator
@{
    ViewData["Title"] = "CHAT - "+Model.Room.Name + " Room";
}

<div class="push-banner wow fadeIn" id="top" data-wow-duration="1s" data-wow-delay="0.5s">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="row">
                    <div class="col-lg-8 order-2 order-md-1 mb-5">
                        <div class="left-content show-up header-text wow fadeInLeft" data-wow-duration="1s" data-wow-delay="1s">
                            <div class="row">
                                <div class="col-lg-12" id="focus">
                                    <small class="bold uppercase text-muted">Public</small>
                                    <h1 class="bold uppercase">@Model.Room.Name Room.</h1>
                                    <small>@Model.Room.Description</small>
                                    <hr />
                                    <div class="chatHolder">
                                        <div class="chatboard" id="chatboard">
                                           
                                        </div>
                                   </div>
                                </div>
                             
                           
                            </div>
                      
                        </div>
                    </div>
                    <div class="col-lg-4 order-1 order-md-2 mb-5 overflowhidden">
                        <div class="right-image wow fadeInRight" data-wow-duration="1s" data-wow-delay="0.5s">
                            <img src="../assets/images/slider-dec.png" alt="">
                        </div>
                    </div> 
                </div>
            </div>
        </div>
    
    </div>
</div>

<script>
   
    //<div class="col-lg-12">
    //                           <div class="gradient-button chatInput">
    //                               <input type="text" name="address" class="form-control" id="messageInput" placeholder="Type message here..." autocomplete="on" required>
    //                               <a id="sendButton">Send <i class="fa fa-send"></i></a>
    //                           </div>
    //                       </div>
    var div1 = document.createElement("section");
    var div2 = document.createElement("section");
    div1.classList.add("col-12");
    div1.classList.add("chatInputHolder");
    div1.classList.add("chatInput");
    //div1.classList.add("gradient-button");
    div2.innerHTML = '<input type="text" name="address" class="form-control" id="messageInput" placeholder="Type message here..." autocomplete="on" required>' + '<button id="sendButton" class="btn chatBtn"><i class="fa fa-rss"></i></button>' + '<span class="coinBalDisplay"><span id="coinBalDisplay">0</span>&nbsp;<i class="fa fa-cubes"></i></span>' + '<a href="#focus" class="sort-icon"><i class="fa fa-sort-up"></i></span>';
    //var chatSend = '<a id="sendButton">Send <i class="fa fa-send"></i></a>';
    div1.appendChild(div2);
    document.getElementById("alertMe").append(div1)

    var coinBalDisplay = document.getElementById("coinBalDisplay");
    coinBalDisplay.innerText = "@loginValidator.GetUser().CoinBonus"
</script>

@section scripts{
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/chat.js"></script>
    <script>
        function bubbleAlert(id, message){
            var section = document.createElement("section");
            var div = document.createElement("div");
            var span = document.createElement("span");
            div.classList.add("chat-alert");

            span.innerText = `${id} ${message}`

            div.appendChild(span);
            section.appendChild(div);
            return section;
        }
        //document.getElementById("sendButton").disabled = true;

        const ROOM_ID = '@Model.Room.ID';
        let userID = "@loginValidator.GetUser().Username";
        let senderID = null;
        let localStream = null;
        const Peers = {}
        let thisUserID = "@loginValidator.GetUserID()";
        let thisUsername = "@loginValidator.GetUser().Username";
        let hostUserID = "@Model.Creator.ID";
        //let hostUserID = "4558fec1-a423-4c46-b032-48d98c3fd6d3";

        const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        const startSignalR = async () => {
            await connection.start();

            await connection.invoke("JoinRoom", ROOM_ID, userID, thisUsername);

        }
        
        startSignalR();

        connection.on('user-connected', id => {

            //console.log('user connected:' + id);


            document.getElementById("chatboard").prepend(bubbleAlert(id, "joined"));
            //console.log("user connected");
            //alert(id);
             
            if (userID === id) return;
         
        });


        connection.on('user-disconnected', id => {
            console.log("Whoopues" + id);
            document.getElementById("chatboard").prepend(bubbleAlert(id,"left"));
            //if (Peers[id]) Peers[userID].close();
        });

        //Chat listener feature
        connection.on("ReceiveMessage", function (user, message) {
            console.log("Message ping");
              
            var section = document.createElement("section");
            var div = document.createElement("div");
            var h6 = document.createElement("h6");
            var p = document.createElement("p");

            div.classList.add("chat-item")

            h6.innerText = `${user}`
            p.innerText = `${message}`

            div.appendChild(h6);
            div.appendChild(p);
            section.appendChild(div);

            document.getElementById("chatboard").prepend(section);


            if ('@loginValidator.GetUser().Username' == user) {
                document.getElementById("messageInput").value = "";
            }
            //if (user === "") {
            //    var p = document.createElement("p");
            //    var span = document.createElement("span");

            //    span.innerText = `${message}`;
            //    p.appendChild(span);

            //    document.getElementById("messagesList").prepend(p);
            //} else {
            //    var p = document.createElement("p");
            //    var a = document.createElement("a");
            //    var span = document.createElement("span");
            //    a.href = "#";
            //    a.innerText = user + ":";
            //    p.appendChild(a);
            //    document.getElementById("messagesList").prepend(p);
            //    // We can assign user-supplied strings to an element's textContent because it
            //    // is not interpreted as markup. If you're assigning in any other way, you
            //    // should be aware of possible script injection concerns.
            //    span.innerText = `${message}`;
            //    p.appendChild(span);

            //    var grabuser = "@loginValidator.GetUser().Username[0].ToString().ToUpper()" + "@loginValidator.GetUser().Username.Substring(1).ToLower()";

            //    if (grabuser == user) {
            //        document.getElementById("messageInput").value = "";
            //    }
            //}

        });

      
        /*
                chat features starts
         */
        document.getElementById("sendButton").addEventListener("click", function (event) {
            if (document.getElementById("messageInput").value != "") {
                var user = "@loginValidator.GetUser().Username";
                var message = document.getElementById("messageInput").value;

                connection.invoke("SendMessage", user, message).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();
            }
        });
    </script>
}       
